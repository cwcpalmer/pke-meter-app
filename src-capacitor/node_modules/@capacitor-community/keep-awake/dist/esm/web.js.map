{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAQ5C,MAAM,OAAO,YAAa,SAAQ,SAAS;IAA3C;;QACU,aAAQ,GAA4B,IAAI,CAAC;QAChC,iBAAY,GAC3B,OAAO,SAAS,KAAK,WAAW,IAAI,UAAU,IAAI,SAAS,CAAC;QAEtD,2BAAsB,GAAG,GAAG,EAAE;YACpC,IAAI,QAAQ,CAAC,eAAe,KAAK,SAAS;gBAAE,IAAI,CAAC,SAAS,EAAE,CAAC;QAC/D,CAAC,CAAC;IAoDJ,CAAC;IAlDQ,KAAK,CAAC,SAAS;QACpB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;QACD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,QAAQ,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC3D,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC3E,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7E,CAAC;IAEM,KAAK,CAAC,UAAU;;QACrB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;QACD,MAAA,IAAI,CAAC,QAAQ,0CAAE,OAAO,GAAG;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,QAAQ,CAAC,mBAAmB,CAC1B,kBAAkB,EAClB,IAAI,CAAC,sBAAsB,CAC5B,CAAC;QACF,QAAQ,CAAC,mBAAmB,CAC1B,kBAAkB,EAClB,IAAI,CAAC,sBAAsB,CAC5B,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,IAAI,CAAC,YAAY;SAC/B,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;QACD,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ;SAC7B,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,qBAAqB;QAC3B,MAAM,IAAI,CAAC,WAAW,CACpB,qDAAqD,CACtD,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport type {\r\n  IsKeptAwakeResult,\r\n  IsSupportedResult,\r\n  KeepAwakePlugin,\r\n} from './definitions';\r\n\r\nexport class KeepAwakeWeb extends WebPlugin implements KeepAwakePlugin {\r\n  private wakeLock: WakeLockSentinel | null = null;\r\n  private readonly _isSupported =\r\n    typeof navigator !== 'undefined' && 'wakeLock' in navigator;\r\n\r\n  private handleVisibilityChange = () => {\r\n    if (document.visibilityState === 'visible') this.keepAwake();\r\n  };\r\n\r\n  public async keepAwake(): Promise<void> {\r\n    if (!this._isSupported) {\r\n      this.throwUnsupportedError();\r\n    }\r\n    if (this.wakeLock) {\r\n      await this.allowSleep();\r\n    }\r\n    this.wakeLock = await navigator.wakeLock.request('screen');\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n    document.addEventListener('fullscreenchange', this.handleVisibilityChange);\r\n  }\r\n\r\n  public async allowSleep(): Promise<void> {\r\n    if (!this._isSupported) {\r\n      this.throwUnsupportedError();\r\n    }\r\n    this.wakeLock?.release();\r\n    this.wakeLock = null;\r\n    document.removeEventListener(\r\n      'visibilitychange',\r\n      this.handleVisibilityChange,\r\n    );\r\n    document.removeEventListener(\r\n      'fullscreenchange',\r\n      this.handleVisibilityChange,\r\n    );\r\n  }\r\n\r\n  public async isSupported(): Promise<IsSupportedResult> {\r\n    const result = {\r\n      isSupported: this._isSupported,\r\n    };\r\n    return result;\r\n  }\r\n\r\n  public async isKeptAwake(): Promise<IsKeptAwakeResult> {\r\n    if (!this._isSupported) {\r\n      this.throwUnsupportedError();\r\n    }\r\n    const result = {\r\n      isKeptAwake: !!this.wakeLock,\r\n    };\r\n    return result;\r\n  }\r\n\r\n  private throwUnsupportedError(): never {\r\n    throw this.unavailable(\r\n      'Screen Wake Lock API not available in this browser.',\r\n    );\r\n  }\r\n}\r\n"]}